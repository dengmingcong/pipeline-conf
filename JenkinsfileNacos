#!/bin/bash/groovy

/*
** Jenkins file for building on JMeter.
**
** The default value of globale variables are set for "stable".
**
** Deploying 'stable' means deploying jobs whose names do not start with 'debug'.
** Deploying 'debug' means deploying jobs whose names start with 'debug'.
*/

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '3', numToKeepStr: '5')), disableConcurrentBuilds(), gitLabConnection('')])

// Variables whose value will not change
ENV_MAP = [
	ci: [label: "fullTest"],
	testonline: [label: "Predeploy-smokeTest"], 
	predeploy: [label: "Predeploy-smokeTest"]
]
ANT_HOME = "/data/apache-ant-1.9.14"
QA_HOME = "/data/qa"
BUSINESS_REPO_NAME = "cloud-api-test"
PIPELINE_CONF_NAME = "pipeline-conf"
NACOS_JMETER_NAME = "nacos-jmeter"
NACOS_SNAPSHOT_NAME = "nacos-snapshot"
JMETER_SOURCE_DIR = "/data/jmeter"

// Variables whose value will change, default for "stable"
JMETER_HOME = JMETER_SOURCE_DIR
DEPLOY_TO="${QA_HOME}/deploy/stable"
BUSINESS_REPO_DIR = ""
PIPELINE_CONF_DIR = ""
NACOS_JMETER_DIR = ""
NACOS_SNAPSHOT_DIR = ""
STAGE = ""
AGENT_LABEL = ""

/*
** 1. determine test stage based on Jenkins job name.
** 2. if debug
**   - set DEPLOY_TO to "${QA_HOME}/deploy/debug"
**   - set JMETER_HOME to "${DEPLOY_TO}/jmeter"
*/
def parseJobName() {
    def jobNameLowerCase = env.JOB_NAME.toLowerCase()

    if (jobNameLowerCase.endsWith("ci")) {
    	STAGE = "ci"
    } else if (jobNameLowerCase.endsWith("testonline")) {
    	STAGE = "testonline"
    } else if (jobNameLowerCase.endsWith("predeploy")) {
    	STAGE = "predeploy"
    } else if (jobNameLowerCase.endsWith("online")) {
    	STAGE = "online"
    }
	else {
    	error "Your job name ${env.JOB_NAME} is supposed to end with either one of words 'ci', 'testonline', 'predeploy', or 'online' (case insensitive)."
    }
	
	AGENT_LABEL = ENV_MAP[STAGE]['label']
	echo "Stages next would be executed on agents with label: ${AGENT_LABEL}."
	
	if (jobNameLowerCase.startsWith("debug")) {
		DEPLOY_TO = "${QA_HOME}/deploy/debug"
		JMETER_HOME = "${DEPLOY_TO}/jmeter"
	}
	
	NACOS_JMETER_DIR = "${DEPLOY_TO}/${NACOS_JMETER_NAME}"
	PIPELINE_CONF_DIR = "${DEPLOY_TO}/${PIPELINE_CONF_NAME}"
	BUSINESS_REPO_DIR = "${DEPLOY_TO}/${BUSINESS_REPO_NAME}"
	NACOS_SNAPSHOT_DIR = "${DEPLOY_TO}/${NACOS_SNAPSHOT_NAME}"
}

stage("Parse Job Name") {
	parseJobName()
}

node(AGENT_LABEL) {
    def JENKINS_JOB_WORKSPACE = env.WORKSPACE
    def OUTPUT_BUILD_XML = "${JENKINS_JOB_WORKSPACE}/build.xml"
    def TEST_NAME = env.JOB_NAME
	
	stage("Check Agent Health") {
		echo "Execute command 'hostname' to check agent health (one minute once)."
		try {
			timeout(1) {
				sh "hostname"
			}
		} catch (Exception e) {
			error "Error. Cannot execute command now."
		}
	}
	
	stage("Pre-Build") {
        sh "[[ -d ${ANT_HOME} ]] && [[ -d ${JMETER_HOME} ]]"
        sh "cd ${JENKINS_JOB_WORKSPACE}; [[ -d reports ]] || mkdir reports; cp ${PIPELINE_CONF_DIR}/resources/img/* reports"
		sh "cd ${NACOS_JMETER_DIR}/bin; python3 init_jenkins_build.py ${env.JOB_NAME} ${JENKINS_JOB_WORKSPACE} ${JMETER_HOME} ${TEST_NAME} ${BUSINESS_REPO_DIR} ${OUTPUT_BUILD_XML} ${NACOS_SNAPSHOT_DIR}"
	}
	
	stage("Ant Build") {
		def emptyTestPlanResult = "${PIPELINE_CONF_DIR}/resources/emptyTestPlan.jtl"
		
		// Run JMeter test plans to generate results (.jtl), results from last build will be deleted first.
		try {
			sh "timeout 900 ${ANT_HOME}/bin/ant -file ${OUTPUT_BUILD_XML} run"
		} catch (Exception e) {
			echo 'Error. Ant building was interrupted (caused by timeout or manual aborted), try to generate report for tests already runned.'
		}
		
		jmx_file_names = readJSON file: "jmx.json"
		jmx_file_names.each {
			if (!fileExists("${it}.jtl")) {
				sh "cp ${emptyTestPlanResult} ${it}.jtl"
			}
			
			sh "if ! grep '</testResults>' ${it}.jtl ;\
					then echo 'Closing tag </testResults> not found in result, test plan ${it}.jmx was interrupted.';\
					sed -i 's/<testResults/& aborted=\"true\"/' ${it}.jtl;\
					echo '<failure>true</failure>' >> ${it}.jtl;\
					echo '</testResults>' >> ${it}.jtl;\
				fi"
		}
		sh "${ANT_HOME}/bin/ant -file ${OUTPUT_BUILD_XML} report"
	}
	
	stage("Publish HTML Reports") {
		def reportFiles = []
        jmx_file_names = readJSON file: "jmx.json"
        jmx_file_names.each {
			jtlContent = readFile "${it}.jtl"
			if (jtlContent.contains('aborted="true"')) {
				newReportName = "[ABORTED]${it}.html"
			} else if (jtlContent.contains('s="false"')) {
				newReportName = "[FAIL]${it}.html"
			} else {
				newReportName = "[PASS]${it}.html"
			}
			sh "mv reports/${it}.html reports/${newReportName}"
			reportFiles.add(newReportName)
        }
		reportFilesString = reportFiles.join(",")
		publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: reportFilesString, reportName: "${TEST_NAME}", reportTitles: ""])
	}
	
	stage("Mark Unstable") {
        jmx_file_names = readJSON file: "jmx.json"
        jmx_file_names.each {
			sh "[[ `grep -c '<failure>true</failure>' ${it}.jtl` == 0 ]]"
			sh "[[ `grep -c 's=\"false\"' ${it}.jtl` == 0 ]]"
        }
	}
}
