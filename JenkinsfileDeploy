#!/bin/bash/groovy

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '3', numToKeepStr: '5')), disableConcurrentBuilds(), gitLabConnection('')])

ENV_MAP = [
	ci: [label: "fullTest", businessRepoName: "Automation_CI", businessRepoUrl: "git@fangcun.vesync.com:testTeam/Automation_CI.git", businessRepoBranches: ["Cheryl","Heby","Lilian","Nana","Yukin"]],
	testonline: [label: "Predeploy-smokeTest", businessRepoName: "Automation_testonline", businessRepoUrl: "git@fangcun.vesync.com:testTeam/Automation_testonline.git", businessRepoBranches: ["master"]], 
	predeploy: [label: "Predeploy-smokeTest", businessRepoName: "Automation_predeploy", businessRepoUrl: "git@fangcun.vesync.com:testTeam/Automation_predeploy.git", businessRepoBranches: ["master"]],
	online: [label: "smokeTest", businessRepoName: "smokeTest_online", businessRepoUrl: "git@fangcun.vesync.com:testTeam/smokeTest_online.git", businessRepoBranches: ["master"]]
]
JMETER_HOME = ""
QA_HOME = ""
STAGE = ""
AGENT_LABEL = ""
BUSINESS_REPO_NAME = ""
BUSINESS_REPO_URL = ""
BUSINESS_REPO_BRANCHES = ""
PIPELINE_CONF = "pipeline-conf"
PIPELINE_CONF_URL = "git@fangcun.vesync.com:testTeam/pipeline-conf.git"
PIPELINE_CONF_BRANCHES = ["master", "cn"]
NODE_LIST = []
UPDATE = params.update
DEBUG = false

/*
** 1. determine test stage based on Jenkins job name.
** 2. set DEBUG to true if string "debug" occurs in job name.
** 3. set QA_HOME to "/data/qa/debug" if string "debug" occurs in job name, else to "/data/qa/stable".
** 4. set JMETER_HOME to "${QA_HOME}/jmeter40" if string "debug" occurs in job name, else to "/usr/local/jmeter40".
*/
def parseJobName() {
    def jobNameLowerCase = env.JOB_NAME.toLowerCase()

    if (jobNameLowerCase.endsWith("ci")) {
    	STAGE = "ci"
    } else if (jobNameLowerCase.endsWith("testonline")) {
    	STAGE = "testonline"
    } else if (jobNameLowerCase.endsWith("predeploy")) {
    	STAGE = "predeploy"
    } else if (jobNameLowerCase.endsWith("online")) {
    	STAGE = "online"
    }else {
    	error "Your job name ${env.JOB_NAME} is supposed to end with either one of words 'ci', 'testonline', 'predeploy', or 'online' (case insensitive)."
    }
	
	if (jobNameLowerCase.contains("debug")) {
		DEBUG = true
		QA_HOME = "/data/qa/debug"
		echo "Word 'debug' found in job name, deploy all files to directory ${QA_HOME}."
		JMETER_HOME = "${QA_HOME}/jmeter40"
		
	} else {
		QA_HOME = "/data/qa/stable"
		echo "Word 'debug' not found in job name, deploy all files to directory ${QA_HOME}."
		JMETER_HOME = "/usr/local/jmeter40"
	}
}

/*
** 1. set UPDATE based on "${env.gitlabSourceRepoName}"
** 2. set BUSINESS_REPO_BRANCHES to specific branch
*/
def handleWebhook() {
	def srcRepoName = env.gitlabSourceRepoName
	
	if (srcRepoName) {
		echo "Triggered via ${env.gitlabSourceRepoHomepage}"
		
		if (["Automation_CI", "Automation_testonline", "Automation_predeploy", "smokeTest_online"].contains(srcRepoName)) {
			UPDATE = "Automation_Env.git"
			BUSINESS_REPO_BRANCHES = [env.gitlabBranch]
		} else if (srcRepoName == "${PIPELINE_CONF}") {
			UPDATE = "group-pipeline"
			PIPELINE_CONF_BRANCHES = [env.gitlabBranch]
		}
		echo "Change from branch ${env.gitlabBranch} was pushed, update branch ${env.gitlabBranch} only"
	} else {
		echo "Triggered via manual clicking"
	}
	echo "UPDATE is set to: ${UPDATE}"
}

/*
** Pull from remote Git repository to the specified agent.
** The remote repository will be pulled several times, each time to a directory named with branch if passed a list.
*/
def pull(String repoName, String repoUrl, branch, String label) {
    echo "Begin to sync repository: ${repoUrl}, branches: ${branch}"
    def localRepoDir = "${QA_HOME}/${repoName}"
	
	node(label) {
		branch.each {
			dstDir = "${localRepoDir}/${it}"
			sh "[[ -d ${dstDir} ]] || mkdir -p ${dstDir}"
			echo "Pulling branch ${it} to directory ${dstDir}"
			checkout([$class: 'GitSCM', branches: [[name: "refs/heads/${it}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${dstDir}"], [$class: 'CloneOption', honorRefspec: true, noTags: true, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[name: 'origin', refspec: "+refs/heads/${it}:refs/remotes/origin/${it}", url: "${repoUrl}"]]])
		}
	}
}

stage("set environment variables") {
    parseJobName()

    AGENT_LABEL = ENV_MAP[STAGE]['label']
    echo "Stages next would be executed on agents with label: ${AGENT_LABEL}."

    BUSINESS_REPO_NAME = ENV_MAP[STAGE]["businessRepoName"]
    BUSINESS_REPO_URL = ENV_MAP[STAGE]["businessRepoUrl"]
    BUSINESS_REPO_BRANCHES = ENV_MAP[STAGE]["businessRepoBranches"]
	
	handleWebhook()

    NODE_LIST = nodesByLabel label: "${AGENT_LABEL}", offline: false
}

if (["all", "Automation_Env.git"].contains(UPDATE)) {
	stage("update ${BUSINESS_REPO_NAME}.git") {
		NODE_LIST.each {
			pull(BUSINESS_REPO_NAME, BUSINESS_REPO_URL, BUSINESS_REPO_BRANCHES, it)
		}
	}
}

if (["all", "pipeline-conf.git", "group-pipeline"].contains(UPDATE)) {
	stage("update pipeline-conf.git") {
		NODE_LIST.each {
			pull(PIPELINE_CONF, PIPELINE_CONF_URL, PIPELINE_CONF_BRANCHES, it)
		}
	}
}

if (["all", "jmeter files", "group-pipeline"].contains(UPDATE)) {
	stage("update jmeter files") {
		NODE_LIST.each {
			node(it) {
				// copy directory "/usr/local/jmeter40" to "${QA_HOME}" if string "debug" occurs in job name.
				if (DEBUG) {
					sh "[[ -d ${JMETER_HOME} ]] || cp -r /usr/local/jmeter40 ${QA_HOME}"
				}
				
				sh "cp ${QA_HOME}/${PIPELINE_CONF}/master/bin/*.groovy ${JMETER_HOME}/bin"
				sh "cp ${QA_HOME}/${PIPELINE_CONF}/master/lib/*.jar ${JMETER_HOME}/lib"
				sh "cp ${QA_HOME}/${PIPELINE_CONF}/master/resources/*.xsl ${JMETER_HOME}/extras"
			}
		}
	}
}